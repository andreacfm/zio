#!/usr/bin/env ruby
require 'gli'
require 'zio/up'
require 'zio/branch'

begin # XXX: Remove this begin/rescue before distributing your app
  require 'zio'
  rescue LoadError
    STDERR.puts 'In development, you need to use `bundle exec bin/zio` to run your app'
    STDERR.puts 'At install-time, RubyGems will make sure lib, etc. are in the load path'
    STDERR.puts 'Feel free to remove this message from bin/zio now'
    exit 64
end

include GLI::App

program_desc 'Bella zio! Productivity tools'

version Zio::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Stash and pull --rebase on master'
command :up do |c|
  c.desc 'Parent directory to scan. Apply to any contained git repo'
  c.flag [:d, :directory]

  c.desc 'Git repos set'
  c.flag [:s, :repos_set]

  c.action do |_global_options, options, _args|
    logger = Zio::UpLogger.new
    opts = { dir: options[:d] }
    opts[:set] = $dirsets[options[:s]] if options[:s]
    Zio::Up.new(opts).up
    logger.print
  end
end

desc 'Branch checkout'
arg_name 'branch_name'
command :branch do |c|
  c.desc 'Parent directory to scan. Apply to any contained git repo'
  c.flag [:d, :directory]

  c.desc 'Git repos set'
  c.flag [:s, :repos_set]

  c.desc 'Create the branch if does not exists'
  c.switch [:f, :force]

  c.desc 'If -f the base branch to checkout from'
  c.default_value 'master'
  c.flag [:b, :base_branch]

  c.action do |_global_options, options, args|
    branch = args[0] || 'master'
    opts = { dir: options[:d], branch: branch, force: options[:f], base_branch: options[:b] }
    opts[:set] = $dirsets[options[:s]] if options[:s]
    Zio::Branch.new(opts).checkout
  end
end

pre do |_global, _command, _options, _args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  $dirsets = YAML.load_file(File.join(ENV['HOME'], '.zio.rc.yml'))[:dirsets]
  true
end

post do |_global, _command, _options, _args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |_exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
